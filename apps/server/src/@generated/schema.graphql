# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type InstructorProfileCount {
  courses: Int!
}

type InstructorProfile {
  userId: ID!
  user: User!
  courses: [Course!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: InstructorProfileCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Video {
  id: ID!
  title: String!
  description: String!
  src: String!
  duration: Int!
  course: Course!
  courseId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CourseCount {
  students: Int!
  videos: Int!
}

type Course {
  id: ID!
  title: String!
  description: String!
  instructor: InstructorProfile!
  instructorId: String!
  students: [StudentProfile!]
  videos: [Video!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: CourseCount!
}

type StudentProfileCount {
  courses: Int!
}

type StudentProfile {
  userId: ID!
  user: User!
  courses: [Course!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: StudentProfileCount!
}

type User {
  id: ID!
  username: String!
  role: UserRole!
  online: Boolean!
  StudentProfile: StudentProfile
  InstructorProfile: InstructorProfile
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  Student
  Instructor
  Admin
}

type Query {
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  userCount: Int!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  username: StringFilter
  role: EnumUserRoleFilter
  online: BoolFilter
  StudentProfile: StudentProfileRelationFilter
  InstructorProfile: InstructorProfileRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input StudentProfileRelationFilter {
  is: StudentProfileWhereInput
  isNot: StudentProfileWhereInput
}

input StudentProfileWhereInput {
  AND: [StudentProfileWhereInput!]
  OR: [StudentProfileWhereInput!]
  NOT: [StudentProfileWhereInput!]
  userId: StringFilter
  user: UserRelationFilter
  courses: CourseListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input CourseListRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: StringFilter
  title: StringFilter
  description: StringFilter
  instructor: InstructorProfileRelationFilter
  instructorId: StringFilter
  students: StudentProfileListRelationFilter
  videos: VideoListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input InstructorProfileRelationFilter {
  is: InstructorProfileWhereInput
  isNot: InstructorProfileWhereInput
}

input InstructorProfileWhereInput {
  AND: [InstructorProfileWhereInput!]
  OR: [InstructorProfileWhereInput!]
  NOT: [InstructorProfileWhereInput!]
  userId: StringFilter
  user: UserRelationFilter
  courses: CourseListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input StudentProfileListRelationFilter {
  every: StudentProfileWhereInput
  some: StudentProfileWhereInput
  none: StudentProfileWhereInput
}

input VideoListRelationFilter {
  every: VideoWhereInput
  some: VideoWhereInput
  none: VideoWhereInput
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: StringFilter
  title: StringFilter
  description: StringFilter
  src: StringFilter
  duration: IntFilter
  course: CourseRelationFilter
  courseId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input CourseRelationFilter {
  is: CourseWhereInput
  isNot: CourseWhereInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  username: SortOrder
  role: SortOrder
  online: SortOrder
  StudentProfile: StudentProfileOrderByWithRelationInput
  InstructorProfile: InstructorProfileOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum SortOrder {
  asc
  desc
}

input StudentProfileOrderByWithRelationInput {
  userId: SortOrder
  user: UserOrderByWithRelationInput
  courses: CourseOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CourseOrderByRelationAggregateInput {
  _count: SortOrder
}

input InstructorProfileOrderByWithRelationInput {
  userId: SortOrder
  user: UserOrderByWithRelationInput
  courses: CourseOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserWhereUniqueInput {
  id: String
  username: String
}

enum UserScalarFieldEnum {
  id
  username
  role
  online
  createdAt
  updatedAt
}